# Use the commands:
# docker build --build-arg MIX_ENV=dev --build-arg REL_NAME=a -t caching:test .
# docker run --rm  -it --user=root caching:test

# Build Stage
FROM  bitwalker/alpine-elixir:latest AS build

RUN elixir -v

# Accept MIX_ENV as build arg
ARG MIX_ENV=${MIX_ENV:-dev}
ARG REL_NAME=${REL_NAME:-rel_a}

# Set current working directory for next steps
WORKDIR /opt/release

# Copy all the app files
COPY . ./

# Run dependencies && Create a release with quiet to skip writing progress
RUN mix deps.get --only $MIX_ENV \
   && mix release ${REL_NAME} --quiet

# Create a non-root user && Transfer ownership to app user
RUN adduser -h /opt/app -D app \
   && chown -R app: _build/

# Final Stage
FROM alpine:latest AS app

# Accept MIX_ENV as build arg
ARG MIX_ENV=${MIX_ENV:-dev}
ARG REL_NAME=${REL_NAME:-rel_a}

# Install system dependencies required for your app at runtime
RUN apk --update --no-cache add bash openssl ncurses-libs tini libstdc++ libgcc

# Create a non-root user
RUN adduser -h /opt/app -D app

# Switch to non-root user
USER app

# Set current working directory to app dir
WORKDIR /opt/app

# Copy release dir from build stage
COPY --from=build /opt/release/_build/$MIX_ENV/rel/${REL_NAME} ./

# COPY entrypoint.sh /entrypoint.sh

# EXPOSE 4000

# ENTRYPOINT ["/sbin/tini", "--", "/entrypoint.sh"]

# Start your app
CMD ["./bin/rel_a", "start_iex"]